/*
	See https://developer.atlassian.com/static/rest/stash/3.11.2/stash-rest.html
*/
package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"log"
	"os"
	"os/user"
	"strings"
)

type configuration struct {
	stashUrl string
	stashUsername string
	stashPassword string
	stashSshUrl string
	stashProject string
	projectRootDirectoryPath string
	useSshProtocol bool
}

func main() {
	config, err := getConfiguration()
	if err != nil {
        log.Fatal(err)
    }
	
	// Get credentials
	username, password, err := getCredentials()
	if err != nil {
        log.Fatal(err)
    }
	
	projectKeys, err := getProjectKeys(*stashUrl, username, password)
	if err != nil {
        log.Fatal(err)
    }
	
	for _, projectKey := range projectKeys {
		fmt.Printf("Project key : %s\n", projectKey)
		
		projectRepos, err := getProjectRepos(*stashUrl, username, password, projectKey)
		if err != nil {
			log.Fatal(err)
		}

		for _, projectRepo := range projectRepos {	
			fmt.Printf("\tRepo : %s\n", projectRepo)
		}
	}
}

func getConfiguration() (config configuration, err Error) {
	// Flags
	// Stash attributes
	stashUrl := flag.String("serverurl", "http://stash", "Stash url - prefix")
	stashUsername := flag.String("username", "", "Stash username - if not supplied will be the current user's name")
	stashPassword := flag.String("password", "", "Stash password - if not supplied will be try to use the STASHPWD environment variable")
	stashSshUrl := flag.String("sshurl", "ssh://git@stash:7999", "Stash ssh url - prefix")
	stashProject := flag.String("project", "SER", "Stash project")
	// Local setup attributes
	projectRootDirectoryPath := flag.String("projectDirectoryPath", "c:\\repos\\stash\\ser", "Project directory path")
	useSshProtocol := flag.Bool("usessh", true, "Use ssh")
	// Parse
	flag.Parse()
	
	return config{
		stashUrl = *stashUrl
		stashUsername = *stashUsername
		stashPassword = *stashPassword
		stashSshUrl = *stashSshUrl
		stashProject = *stashProject
		projectRootDirectoryPath = *projectRootDirectoryPath
		useSshProtocol = *useSshProtocol
	}
}


func getCredentials() (username, password string, err error) {
	user, err := user.Current()
    if err != nil {
        return
    }
	
	username = user.Username
	domainSperatorIndex := strings.Index(username, "\\")
	if domainSperatorIndex > -1 {
		username = username[domainSperatorIndex + 1:]
	}
	//if username == "" {
		// PENDING: This makes no sense and need to be sorted out
		prompt := fmt.Sprintf("Gimme your stash user name, default is %s : ", user.Username)
		username, err = promptAndRead(prompt, user.Username, false)
		if (err != nil) {
			return
		}
	//}
	
	password = os.Getenv("STASHPWD")
	if password == "" {
		prompt := "Gimme your password : "
		password, err = promptAndRead(prompt, "", true)
	}

	return
}

func promptAndRead(prompt, defaultValue string, isSensitive bool) (value string, err error) {
	// PENDING
	//	Sensitive data issue see https://github.com/howeyc/gopass
	//	Newline issue see https://github.com/golang/go/issues/8944
	fmt.Printf(prompt)
	if _, err = fmt.Scanf("%s\r\n", &value); err != nil {
		return
	}

	if value == defaultValue {
		value = defaultValue
	}

	return
}

func getProjectRepos(stashUrl, username, password, projectKey string) (projectRepos []string, err error) {
	return getListFromStashPagedData(
		username, 
		password, 
		func(start, limit int) string {
			return fmt.Sprintf("%s/rest/api/1.0/projects/%s/repos?start=%d&limit=%d", stashUrl, projectKey, start, limit)
		}, 
		"name")
}

func getProjectKeys(stashUrl, username, password string) (projectKeys []string, err error) {
	return getListFromStashPagedData(
		username, 
		password, 
		func(start, limit int) string {
			return fmt.Sprintf("%s/rest/api/1.0/projects?start=%d&limit=%d", stashUrl, start, limit)
		}, 
		"key")
}

func getListFromStashPagedData(username, password string, createUrl func(int, int) string, key string) (list []string, err error) {
	start, limit := 0, 25
	for {
		stashUrl := createUrl(start, limit)
		
		req, err := http.NewRequest("GET", stashUrl, nil)
		req.SetBasicAuth(username, password)
		req.Header.Set("Content-Type", "application/json")

		client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			return nil, err
		}
		defer resp.Body.Close()
		
		var data struct {
			Size int
			IsLastPage bool
			Values []map[string]interface{}
		}
		err = json.NewDecoder(resp.Body).Decode(&data)
		if err != nil {
			return nil, err
		}
		
		for _, project := range data.Values {
			list = append(list, project[key].(string))
		}
		
		if data.IsLastPage {
			break
		}
		
		start += limit + 1
	}
	
	return
}







/*
    url := "http://restapi3.apiary.io/notes"
    fmt.Println("URL:>", url)

    var jsonStr = []byte(`{"title":"Buy cheese and bread for breakfast."}`)
    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))
    req.Header.Set("X-Custom-Header", "myvalue")
    req.Header.Set("Content-Type", "application/json")

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    fmt.Println("response Status:", resp.Status)
    fmt.Println("response Headers:", resp.Header)
    body, _ := ioutil.ReadAll(resp.Body)
    fmt.Println("response Body:", string(body))


# Stash attributes
$stashUrl = 'http://stash'
$stashSshUrl = 'ssh://git@stash:7999'
$stashProject = 'SER'

# Local setup attributes
$projectRootDirectoryPath = 'c:\repos\stash\ser'
$useSshProtocol = $true

# Get credentials
$userName = read-host "Gimme your stash user name, default is $($env:UserName)"
$userName = if ($userName -ne '') { $userName } else { $env:UserName }
$password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR((read-host 'Gimme your stash password' -assecurestring)));
$credentials = "$userName`:$password"

# Get stash projects information
$stashProjectsUrl = "$stashUrl/rest/api/1.0/projects"
$projects = convertfrom-json (curl -u $credentials $stashProjectsUrl)
# Echo info - lots of data here
#$projects.Values
# Echo names
#$projects.Values | select name

# Get stash repos information
$stashReposUrl = "$stashUrl/rest/api/1.0/projects/$stashProject/repos"
$repos = convertfrom-json (curl -u $credentials $stashReposUrl)
# Echo info - lots of data here
#$repos.Values
# Echo names
#$repos.Values | select name

# Clone if not already cloned
pushd
cd $projectRootDirectoryPath
foreach ($repoName in ($repos.Values).name)
{
	$repoName = $repoName.ToLower()
	$repoDirectoryPath = join-path $projectRootDirectoryPath $repoName
	if (! (test-path $repoDirectoryPath))
	{
		if ($useSshProtocol)
		{
			$stashRepoUrl = "$stashSshUrl/$stashProject/$repoName.git".ToLower()
			git clone $stashRepoUrl
		}
		else
		{
			write-host 'Have not taken care of http protocol'
		}
	}
}
popd


<#
Pretty version of http://stash/rest/api/1.0/projects/
Have removed all but the first repo - too much noise
{
    "size":4,
    "limit":25,
    "isLastPage":true,
    "values":[
        {
            "key":"API",
            "id":104,
            "name":"ApiTeam",
            "public":false,
            "type":"NORMAL",
            "link":{
                "url":"/projects/API",
                "rel":"self"
            },
            "links":{
                "self":[
                    {
                        "href":"http://stash/projects/API"
                    }
                ]
            }
        },
		// More projects .... Removed
    ],
    "start":0
}


Pretty version of http://stash/rest/api/1.0/projects/ser/repos
Have removed all but the first repo - too much noise
{
    "size":17,
    "limit":25,
    "isLastPage":true,
    "values":[
        {
            "slug":"travelrepublic.adverts.service",
            "id":324,
            "name":"TravelRepublic.Adverts.Service",
            "scmId":"git",
            "state":"AVAILABLE",
            "statusMessage":"Available",
            "forkable":true,
            "project":{
                "key":"SER",
                "id":121,
                "name":"Services",
                "description":"Travel Republic Services",
                "public":false,
                "type":"NORMAL",
                "link":{
                    "url":"/projects/SER",
                    "rel":"self"
                },
                "links":{
                    "self":[
                        {
                            "href":"http://stash/projects/SER"
                        }
                    ]
                }
            },
            "public":false,
            "link":{
                "url":"/projects/SER/repos/travelrepublic.adverts.service/browse",
                "rel":"self"
            },
            "cloneUrl":"http://pmcgrath@stash/scm/ser/travelrepublic.adverts.service.git",
            "links":{
                "clone":[
                    {
                        "href":"http://pmcgrath@stash/scm/ser/travelrepublic.adverts.service.git",
                        "name":"http"
                    },
                    {
                        "href":"ssh://git@stash:7999/ser/travelrepublic.adverts.service.git",
                        "name":"ssh"
                    }
                ],
                "self":[
                    {
                        "href":"http://stash/projects/SER/repos/travelrepublic.adverts.service/browse"
                    }
                ]
            }
        },
		// More repos .... Removed
	]
    "start":0
}
#>
*/